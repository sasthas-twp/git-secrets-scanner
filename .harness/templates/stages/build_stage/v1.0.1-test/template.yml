template:
  name: "Build with SBT Support"
  identifier: build_stage
  versionLabel: "1.0.1-test"
  type: Stage
  projectIdentifier: ${projectIdentifier}
  orgIdentifier: ${orgIdentifier}
  spec:
    type: CI
    spec:
      cloneCodebase: true
      platform:
        os: Linux
        arch: Amd64
      execution:
        steps:
          # Setup SBT
          - step:
              type: Run
              name: "Setup SBT"
              identifier: setup_sbt
              spec:
                shell: Sh
                command: |
                  # Install SBT if not present
                  if ! command -v sbt &> /dev/null; then
                    echo "Installing SBT..."
                    # For Debian/Ubuntu
                    if command -v apt-get &> /dev/null; then
                      echo "deb https://repo.scala-sbt.org/scalasbt/debian all main" | sudo tee /etc/apt/sources.list.d/sbt.list
                      echo "deb https://repo.scala-sbt.org/scalasbt/debian /" | sudo tee /etc/apt/sources.list.d/sbt_old.list
                      curl -sL "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x2EE0EA64E40A89B84B2DF73499E82A75642AC823" | sudo apt-key add
                      sudo apt-get update
                      sudo apt-get install -y sbt
                    # For RHEL/CentOS
                    elif command -v yum &> /dev/null; then
                      curl https://bintray.com/sbt/rpm/rpm | sudo tee /etc/yum.repos.d/bintray-sbt-rpm.repo
                      sudo yum install -y sbt
                    # For MacOS
                    elif command -v brew &> /dev/null; then
                      brew install sbt
                    else
                      echo "Unsupported package manager. Please install SBT manually."
                      exit 1
                    fi
                  fi
                  
                  # Verify SBT installation
                  sbt sbtVersion
                envVariables:
                  VERSION: ${version}
          
          # SBT Clean and Compile
          - step:
              type: Run
              name: "SBT Clean and Compile"
              identifier: sbt_compile
              spec:
                shell: Sh
                command: |
                  echo "Cleaning and compiling with SBT..."
                  sbt -v "set ThisBuild/version := \"${version}\"" clean compile
                envVariables:
                  SBT_OPTS: "-Xmx2G -Xss2M -XX:MaxMetaspaceSize=1G"
                  
          # Run Tests
          - step:
              type: Run
              name: "Run SBT Tests"
              identifier: sbt_test
              spec:
                shell: Sh
                command: |
                  echo "Running tests with SBT..."
                  sbt -v test
                envVariables:
                  SBT_OPTS: "-Xmx2G -Xss2M -XX:MaxMetaspaceSize=1G"
          
          # Package Application
          - step:
              type: Run
              name: "SBT Package"
              identifier: sbt_package
              spec:
                shell: Sh
                command: |
                  echo "Packaging application with SBT..."
                  sbt -v "set ThisBuild/version := \"${version}\"" package
                envVariables:
                  SBT_OPTS: "-Xmx2G -Xss2M -XX:MaxMetaspaceSize=1G"
          
          # Generate Documentation (Optional)
          - step:
              type: Run
              name: "Generate SBT Documentation"
              identifier: sbt_doc
              spec:
                shell: Sh
                command: |
                  echo "Generating documentation with SBT..."
                  sbt -v doc
                envVariables:
                  SBT_OPTS: "-Xmx2G -Xss2M -XX:MaxMetaspaceSize=1G"
                # Make this step optional
                failureStrategies:
                  - onFailure:
                      errors:
                        - AllErrors
                      action:
                        type: Ignore
                        spec: {}
      
      # Caching configuration for SBT
      caching:
        enabled: true
        paths:
          - "${HOME}/.sbt"           # SBT cache and plugins
          - "${HOME}/.ivy2/cache"     # Ivy cache
          - "${HOME}/.cache/coursier" # Coursier cache (used by newer SBT versions)
          - "${HOME}/.coursier"       # Alternative Coursier cache location
      
      # Artifacts to save
      artifacts:
        primary:
          spec:
            connectorRef: <+input>
            artifactPath: <+input>
            artifactFilter: "*.jar"
            type: DockerRegistry
        sidecars: []
      
      # Reports
      reports:
        type: JUnit
        spec:
          paths:
            - "**/target/test-reports/*.xml"
            - "**/target/scala-*/test-reports/*.xml"
      
      # Failure strategies
      failureStrategies:
        - onFailure:
            errors:
              - AllErrors
            action:
              type: MarkAsFailure
              spec: {}
